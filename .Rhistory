ggplot(df2, aes(x=year, y=price, group=district)) +
geom_line(aes(color=district))+
geom_point(aes(color=district))
vill = a[a$district=="Villeurbanne" ,]
ggplot()+geom_point(mapping = aes(x=vill$latitude,y=vill$longitude , color = vill$price) )+scale_color_distiller(palette = 'Spectral') + geom_point(mapping = aes(45.780234113880425 , 4.865561717882041) , color="purple")
AAB = stations
AAB$model = as.factor(AAB$model)
# colnames(AAB) = c("name" , "latitude" , "longtitude" , "groups")
good = AAB[(45.79 > AAB$latitude)&(AAB$latitude > 45.746) & (4.85<AAB$longtitude) &(AAB$longtitude < 4.95) , ]
#
#
ggplot()+
geom_point(mapping = aes(x=vill$latitude,y=vill$longitude))+
geom_point(mapping = aes(45.780234113880425 , 4.865561717882041) , color="purple")+ geom_point(mapping = aes(good$latitude , good$longtitude,color= "Red"))
lat1 = a$latitude
lat2 = 45.780234113880425
lat1 = lat1 / ((180/pi))
lat2 = lat2 / ((180/pi))
lon1 = a$longitude
lon2 = 4.865561717882041
lon1 = lon1 / ((180/pi))
lon2 = lon2 / ((180/pi))
d = 3963.0 * acos((sin(lat1) * sin(lat2)) + cos(lat1) * cos(lat2) * cos(lon2-lon1))
d = 1609.344 * d
a$uni_distance = d
vill = a[a$district=="Villeurbanne" ,]
vill$station_distance = vill$station_distance*1000
vill$price = vill$price / 100
c1 = 3
c2 = 2
c3 = 1
vill$cost = c1*vill$price + c2*vill$uni_distance + c3*vill$station_distance
vill = vill[order(vill$cost),]
ggplot()+
geom_point(mapping = aes(x=vill$latitude,y=vill$longitude) , color="grey")+
geom_point(mapping = aes(45.780234113880425 , 4.865561717882041) , color="purple")+ geom_point(mapping = aes(good$latitude , good$longtitude,color= "Red"))+geom_point(mapping = aes(vill$latitude[1] , vill$longitude[1]) , color="blue")
vill2 = vill[1:30 , ]
vill2$price = vill2$price * 100
head(vill2 , 'all')
vill2[1,]
ggplot()+
geom_point(mapping = aes(x=vill$latitude,y=vill$longitude) , color="grey")+
geom_point(mapping = aes(45.780234113880425 , 4.865561717882041) , color="purple")+ geom_point(mapping = aes(good$latitude , good$longtitude,color= "Red"))+geom_point(mapping = aes(vill$latitude[1] , vill$longitude[1]) , color="blue")
table(a$rooms_count)
# hist(a$rooms_count)
barplot(a$rooms_count)
table(a$rooms_count)
hist(a$rooms_count , color="red")
table(a$rooms_count)
hist(a$rooms_count , fill="red")
table(a$rooms_count)
hist(a$rooms_count , col="red")
hist(a$surface_housing , breaks = seq(-10,350 , 5) , col="green")
var = var(a$surface_housing)
his = hist(a$surface_housing , breaks = seq(0,300,5) , col="yellow")
xfit = seq(min(a$surface_housing) , max(a$surface_housing) , length=length(a$surface_housing))
yfit = dnorm(xfit , mean = mea, sd = s) * diff(his$mids[1:2] * length(a$surface_housing))
lines(xfit , yfit , col="blue" , )
hist(effective_usable , breaks = seq(0,300 , 10) , col = "pink")
table(a$rooms_count)
hist(a$rooms_count ,main="Distribution of rooms_count", col="red")
table(a$rooms_count)
hist(a$rooms_count ,main="Distribution of rooms_count",xlab = "rooms_count", col="red")
hist(a$surface_housing , breaks = seq(-10,350 , 5) , col="green" , main="Distribution of surface_housing" , xlab = "surface_housing")
var = var(a$surface_housing)
his = hist(a$surface_housing , breaks = seq(0,300,5) , col="yellow" , main="Distribution of surface_housing" , xlab = "surface_housing")
xfit = seq(min(a$surface_housing) , max(a$surface_housing) , length=length(a$surface_housing))
yfit = dnorm(xfit , mean = mea, sd = s) * diff(his$mids[1:2] * length(a$surface_housing))
lines(xfit , yfit , col="blue" , )
hist(a$surface_terrain , col = "purple" , main="Distribution of surface_terrain" , xlab = "surface_terrain")
t2 = a[a$surface_terrain!=0 , ]
hist(t2$surface_terrain , breaks = seq,col = "purple" , main="Distribution of surface_terrain" , xlab = "surface_terrain")
t2 = a[a$surface_terrain!=0 , ]
hist(t2$surface_terrain , breaks = seq(0 , 1000 , 10) , col = "purple" , main="Distribution of surface_terrain" , xlab = "surface_terrain")
hist(a$latitude ,  main="Distribution of latitude" , xlab = "latitude")
hist(a$longitude, main="Distribution of longtitude" , xlab = "longtitude")
a$cons_year = as.factor(a$cons_year)
barplot(table(a$cons_year))
hist(table(a$cons_year))
a$cons_year = as.factor(a$cons_year)
barplot(table(a$cons_year))
hist(a$cons_year)
a$cons_year = as.factor(a$cons_year)
barplot(table(a$cons_year))
table(a$rooms_count)
hist(a$rooms_count ,main="Distribution of rooms_count",xlab = "rooms_count", col="red", breaks = seq(0.5 , 6.5 , 1))
table(a$rooms_count)
hist(a$rooms_count ,main="Distribution of rooms_count",xlab = "rooms_count", col="red", breaks = seq(0.5 , 6.5 , 0.5))
table(a$rooms_count)
hist(a$rooms_count ,main="Distribution of rooms_count",xlab = "rooms_count", col="red", breaks = seq(0.25 , 6.5 , 0.5))
colSums(a[c("price")] > 750000)
r1 = (a[c("rooms_count")]==1)
r2 = (a[c("rooms_count")]==2)
r3 = (a[c("rooms_count")]==3)
r4 = (a[c("rooms_count")]==4)
r5 = (a[c("rooms_count")]==5)
r6 = (a[c("rooms_count")]==6)
ggplot() + geom_point(mapping = aes(a$surface_housing , a$rooms_count))+
scale_y_continuous(breaks = c(0,1,2,3,4,5,6)) +
geom_point(mapping = aes(mean(a$surface_housing[r1]) , 1) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r2]) , 2) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r3]) , 3) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r4]) , 4) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r5]) , 5) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r6]) , 6) , color="red")+ xlab("surface_housing") + ylab("rooms_count")
ggplot()+geom_point(mapping = aes(x=a$latitude,y=a$longitude , color = a$area_price_ratio) )+scale_color_distiller(palette = 'Spectral')
ggplot()+geom_point(mapping = aes(x=a$latitude,y=a$longitude , color = a$area_price_ratio) )
ggplot()+geom_point(mapping = aes(x=a$latitude,y=a$longitude , color = a$area_price_ratio) )+scale_color_distiller(palette = 'Spectral')
ggplot()+geom_point(mapping = aes(x=a$latitude,y=a$longitude , color = a$area_price_ratio) )+scale_color_distiller(palette = 'Set1')
ggplot()+geom_point(mapping = aes(x=a$latitude,y=a$longitude , color = a$area_price_ratio) )+scale_color_distiller(palette = 'Spectral')
vill = a[a$district=="Villeurbanne" ,]
ggplot()+geom_point(mapping = aes(x=vill$latitude,y=vill$longitude , color = vill$price) )+scale_color_distiller(name="price" ,palette = 'Spectral') + geom_point(mapping = aes(45.780234113880425 , 4.865561717882041) , color="purple") + xlab("latitude") + ylab("longtitude")
AAB = stations
AAB$model = as.factor(AAB$model)
# colnames(AAB) = c("name" , "latitude" , "longtitude" , "groups")
good = AAB[(45.79 > AAB$latitude)&(AAB$latitude > 45.746) & (4.85<AAB$longtitude) &(AAB$longtitude < 4.95) , ]
#
#
ggplot()+
geom_point(mapping = aes(x=vill$latitude,y=vill$longitude))+
geom_point(mapping = aes(45.780234113880425 , 4.865561717882041) , color="purple")+ geom_point(mapping = aes(good$latitude , good$longtitude,color= "Red"))+xlab("latitude") + ylab("longtitude")
load("~/amar/proj2/.RData")
bool = TRUE
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
# install.packages("readr")
# install.packages("stringr")
# install.packages("ggplot2")
# install.packages("dplyr")
# install.packages("ggthemes")
# install.packages("broom")
# install.packages("ggpubr")
# install.packages("quantmod")
# install.packages("rcompanion")
# install.packages("heatmaply")
# install.packages("rjson")
# install.packages("BSDA")
# install.packages("lemon")
library(readr)
library(stringr)
library(ggplot2)
library(dplyr)
library(ggthemes)
library(fastR2)
library(mosaicData)
library(broom)
library(ggpubr)
library(data.table)
library(quantmod)
library(rcompanion)
library(reshape2)
library(heatmaply)
library(rjson)
library(BSDA)
library(lemon)
knitr::opts_chunk$set(echo = TRUE)
knit_print.data.frame=lemon_print
a = read.csv("lyon_housing.csv" , encoding = "UTF-8")
a = a[order(a$date_transaction , a$price),]
head(a)
colSums(is.na(a))
effective_usable = a$surface_effective_usable
a = a[,c(1:5 , 7:14)]
a= a[complete.cases(a) , ]
stations = fromJSON(file = "station_coordinates.json")
namess = c()
longitudes = c()
latitudes= c()
group = c()
models = c()
for (i in 1:11){
AA = stations[i]
AA = as.data.frame(AA)
di = dim(AA)
for (j in 1:di[1]){
namess = append(namess , AA[j,1])
longitudes = append(longitudes , AA[j,3])
latitudes = append(latitudes , AA[j,2])
group= append(group , i)
if (i<=4){
models = append(models , "train")
}else{
models = append(models , "tramva")
}
}
}
stations = data.frame(namess , latitudes , longitudes , group , models)
stations$models = as.factor(stations$models)
colnames(stations) = c("name" , "latitude" , "longitude" , "group" , "model")
head(stations)
d = as.POSIXct(a$date_transaction , format="%Y/%m/%d")
y =format(d , format="%Y")
m = format(d , format="%m")
d = format(d , format="%d")
for (i in 16:21){
st1 = paste("00" ,i , sep = "")
st2 = paste("20" ,i , sep = "")
y[y==st1] = st2
}
a$year = as.character(y)
a$month = as.character(m)
a$day = as.character(d)
d2 = as.POSIXct(a$date_construction , format="%Y/%m/%d")
y2 =format(d2 , format="%Y")
m2 = format(d2 , format="%m")
d2 = format(d2 , format="%d")
for (i in 0:9){
st1 = paste("000" ,i , sep = "")
st2 = paste("200" ,i , sep = "")
y2[y2==st1] = st2
}
for (i in 10:23){
st1 = paste("00" ,i , sep = "")
st2 = paste("20" ,i , sep = "")
y2[y2==st1] = st2
}
for (i in 85:99){
st1 = paste("00" ,i , sep = "")
st2 = paste("19" ,i , sep = "")
y2[y2==st1] = st2
}
a$cons_year = as.character(y2)
a$cons_month = as.character(m2)
a$cons_day = as.character(d2)
di =dim(stations)
a$station_distance = rep(Inf , each=40373)
for (i in 1:di[1]){
lat1 = a$latitude
lat2 = stations$latitude[i]
lat1 = lat1 / ((180/pi))
lat2 = lat2 / ((180/pi))
lon1 = a$longitude
lon2 = stations$longitude[i]
lon1 = lon1 / ((180/pi))
lon2 = lon2 / ((180/pi))
d = 3963.0 * acos((sin(lat1) * sin(lat2)) + cos(lat1) * cos(lat2) * cos(lon2-lon1))
d = 1.609344 * d
d2 = pmin(a$station_distance , d)
a$station_distance = d2
}
head(a)
table(a$type_purchase)
table(a$type_property)
table(a$rooms_count)
hist(a$rooms_count ,main="Distribution of rooms_count",xlab = "rooms_count", col="red", breaks = seq(0.25 , 6.5 , 0.5))
hist(a$surface_housing , breaks = seq(-10,350 , 5) , col="green" , main="Distribution of surface_housing" , xlab = "surface_housing")
mea = mean(a$surface_housing)
s = sd(a$surface_housing)
print(paste("mean=" , mea , ", sd=" , s))
var = var(a$surface_housing)
his = hist(a$surface_housing , breaks = seq(0,300,5) , col="yellow" , main="Distribution of surface_housing" , xlab = "surface_housing")
xfit = seq(min(a$surface_housing) , max(a$surface_housing) , length=length(a$surface_housing))
yfit = dnorm(xfit , mean = mea, sd = s) * diff(his$mids[1:2] * length(a$surface_housing))
lines(xfit , yfit , col="blue" , )
hist(effective_usable , breaks = seq(0,300 , 10) , col = "pink")
hist(a$surface_terrain , col = "purple" , main="Distribution of surface_terrain" , xlab = "surface_terrain")
t = a$surface_terrain
t[t>0] = 1
t = as.factor(t)
table(t)
t2 = a[a$surface_terrain!=0 , ]
hist(t2$surface_terrain , breaks = seq(0 , 1000 , 10) , col = "purple" , main="Distribution of surface_terrain" , xlab = "surface_terrain")
table(a$parkings_count)
hist(a$price , breaks = seq(20000 , 2800000 , 1000) ,  main="Distribution of price" , xlab = "price")
colSums(a[c("price")] > 1000000)
m1 = mean(a$price , na.rm=TRUE)
m1
b1 = a$price
b1 = b1[!is.na(b1) & b1 <= 1000000]
m2 = mean(b1)
m2
m1 - m2
table(a$district)
hist(a$latitude ,  main="Distribution of latitude" , xlab = "latitude")
hist(a$longitude, main="Distribution of longitude" , xlab = "longitude")
a$district = as.factor(a$district)
ggplot(data = a)+geom_point(mapping = aes(x=latitude,y=longitude, color=district))
a$cons_year = as.factor(a$cons_year)
barplot(table(a$cons_year))
table(a$cons_year)
a$cons_year = as.character(a$cons_year)
a$cons_year = as.numeric(a$cons_year)
a$cons_month = as.numeric(a$cons_month)
colSums(a[c("cons_year")] == 2021 & a[c("cons_month")] >7 & a[c("type_purchase")]=="ancien")
a$cons_year = as.character(a$cons_year)
a$cons_month = as.character(a$cons_month)
a$year = as.factor(a$year)
table(a$district)
table(a$year)
table(a$district , a$year)
a$year = as.character(a$year)
districts = c("Lyon 1er Arrondissement" , "Lyon 2e Arrondissement" ,
"Lyon 3e Arrondissement" , "Lyon 4e Arrondissement" ,
"Lyon 5e Arrondissement" , "Lyon 6e Arrondissement" ,
"Lyon 7e Arrondissement" , "Lyon 8e Arrondissement" ,
"Lyon 9e Arrondissement" , "Villeurbanne")
years = c("2016" , "2017" , "2018" , "2019" , "2020" , "2021")
means = c()
for (di in districts) {
for (ye in years) {
t = mean(a[a$year==ye & a$district ==di , 'price'])
means = c(means , t)
}
}
values <- matrix(means,ncol=6,byrow=TRUE)
colnames(values) = years
rownames(values) = districts
values2 = as.table(values)
values2
values = data.frame(values)
colnames(values) = years
rownames(values) = districts
values = transpose(values)
values = data.frame(years , values)
colnames(values) = c("years" , districts)
rownames(values) = years
df2 = data.frame(district=rep(districts, each=6),
year=rep(years , times = 10) , price =means)
ggplot(df2, aes(x=year, y=price, group=district)) +
geom_line(aes(color=district))+
geom_point(aes(color=district))
xcv = c()
xcv2 = c()
for (di in districts) {
a1 = df2[df2$district==di & df2$year=="2016" , 'price']
a2 = df2[df2$district==di & df2$year=="2021" , 'price']
percent = (a2-a1)/ a1
percent2 = (a2-a1)/ 5
xcv = c(xcv , percent)
xcv2 = c(xcv2 , percent2)
}
names(xcv2) = districts
xcv2
B1 = which.min(xcv)
B2 = which.max(xcv)
print(paste("minimum increase in prices is:" ,xcv2[B1], " and is for district:" , names(which.min(xcv2)) ))
print(paste("maximum increase in prices is:" ,xcv2[B2], " and is for district:" , names(which.max(xcv2)) ))
names(xcv) = districts
xcv
A1 = which.min(xcv)
A2 = which.max(xcv)
print(paste("minimum increase rate is:" ,xcv[A1], " and is for district:" , names(which.min(xcv)) ))
print(paste("maximum increase rate is:" ,xcv[A2], " and is for district:" , names(which.max(xcv)) ))
districts = c("Lyon 1er Arrondissement" , "Lyon 2e Arrondissement" ,
"Lyon 3e Arrondissement" , "Lyon 4e Arrondissement" ,
"Lyon 5e Arrondissement" , "Lyon 6e Arrondissement" ,
"Lyon 7e Arrondissement" , "Lyon 8e Arrondissement" ,
"Lyon 9e Arrondissement" , "Villeurbanne")
years = c("2016" , "2017" , "2018" , "2019" , "2020" , "2021")
month = c("01" ,"02","03","04","05","06","07","08","09","10","11","12")
means = c()
dis = c()
yearss = c()
months = c()
for (di in districts) {
for (ye in years) {
for (mo in month) {
t = mean(a[a$year==ye & a$month==mo & a$district ==di , 'price'])
means = c(means , t)
dis = append(dis , di)
yearss = append(yearss , ye)
months = append(months , mo)
}
}
}
yearss = as.numeric(yearss)
yearss = yearss - 2016
months = as.numeric(months)
time = 12 * yearss + months
nbv = data.frame(means , dis , yearss , months , time , stringsAsFactors = F)
nbv2 = nbv[complete.cases(nbv) , ]
ggplot(nbv2, aes(x=time, y=means, group=dis)) +
geom_line(aes(color=dis))+
geom_point(aes(color=dis))
a$year = as.factor(a$year)
ggplot(data = a)+geom_point(mapping = aes(x=latitude,y=longitude, color=year))
a$year = as.character(a$year)
new_a = a[c(4,5,6,7 ,11,12,17, 8)]
new_a$cons_year = as.numeric(new_a$cons_year)
corr <- round(cor(new_a),2) ### choosing numeric columns
mcorr <- melt(corr , na.rm = TRUE)
ggplot(data = mcorr, aes(x=Var1, y=Var2,fill=value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 4) +theme(axis.text.x = element_text(angle = 20, vjust = 1,
size = 9, hjust = 1))
r1 = (a[c("rooms_count")]==1)
r2 = (a[c("rooms_count")]==2)
r3 = (a[c("rooms_count")]==3)
r4 = (a[c("rooms_count")]==4)
r5 = (a[c("rooms_count")]==5)
r6 = (a[c("rooms_count")]==6)
ggplot() + geom_point(mapping = aes(a$surface_housing , a$rooms_count))+
scale_y_continuous(breaks = c(0,1,2,3,4,5,6)) +
geom_point(mapping = aes(mean(a$surface_housing[r1]) , 1) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r2]) , 2) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r3]) , 3) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r4]) , 4) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r5]) , 5) , color="red")+
geom_point(mapping = aes(mean(a$surface_housing[r6]) , 6) , color="red")+ xlab("surface_housing") + ylab("rooms_count")
ggplot() + geom_point(mapping = aes(a$surface_housing , a$price))+xlab("surface_housing")+ylab("price")
r1 = (a[c("rooms_count")]==1)
r2 = (a[c("rooms_count")]==2)
r3 = (a[c("rooms_count")]==3)
r4 = (a[c("rooms_count")]==4)
r5 = (a[c("rooms_count")]==5)
r6 = (a[c("rooms_count")]==6)
ggplot() + geom_point(mapping = aes(a$price , a$rooms_count)) +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6))+ geom_point(mapping = aes(mean(a$price[r1]) , 1) , color="red")+ geom_point(mapping = aes(mean(a$price[r2]) , 2) , color="red")+ geom_point(mapping = aes(mean(a$price[r3]) , 3) , color="red")+ geom_point(mapping = aes(mean(a$price[r4]) , 4) , color="red")+
geom_point(mapping = aes(mean(a$price[r5]) , 5) , color="red")+
geom_point(mapping = aes(mean(a$price[r6]) , 6) , color="red")+xlab("price") +ylab("rooms_count")
a$area_price_ratio = a$price / a$surface_housing
max(a$area_price_ratio)
min(a$area_price_ratio)
mean(a$area_price_ratio)
ggplot()+geom_point(mapping = aes(x=a$latitude,y=a$longitude , color = a$area_price_ratio) )+scale_color_distiller(palette = 'Spectral')
hist(a$area_price_ratio , breaks = seq(0 , 36000 , 10))
colSums(a[c("area_price_ratio")] > 10000)
m1 = mean(a$area_price_ratio , na.rm=TRUE)
m1
b1 = a$area_price_ratio
b1 = b1[!is.na(b1) & b1 <= 10000]
m2 = mean(b1)
m2
m1 - m2
districts = c("Lyon 1er Arrondissement" , "Lyon 2e Arrondissement" ,
"Lyon 3e Arrondissement" , "Lyon 4e Arrondissement" ,
"Lyon 5e Arrondissement" , "Lyon 6e Arrondissement" ,
"Lyon 7e Arrondissement" , "Lyon 8e Arrondissement" ,
"Lyon 9e Arrondissement" , "Villeurbanne")
years = c("2016" , "2017" , "2018" , "2019" , "2020" , "2021")
month = c("01" ,"02","03","04","05","06","07","08","09","10","11","12")
means = c()
dis = c()
yearss = c()
months = c()
for (di in districts) {
for (ye in years) {
for (mo in month) {
t = mean(a[a$year==ye & a$month==mo & a$district ==di , 'area_price_ratio'])
means = c(means , t)
dis = append(dis , di)
yearss = append(yearss , ye)
months = append(months , mo)
}
}
}
yearss = as.numeric(yearss)
yearss = yearss - 2016
months = as.numeric(months)
time = 12 * yearss + months
nbv = data.frame(means , dis , yearss , months , time , stringsAsFactors = F)
nbv2 = nbv[complete.cases(nbv) , ]
ggplot(nbv2, aes(x=time, y=means, group=dis)) +
geom_line(aes(color=dis))+
geom_point(aes(color=dis))
a$cons_year = as.numeric(a$cons_year)
fit3 = lm(price~rooms_count + surface_housing + surface_terrain + parkings_count + cons_year + station_distance  , data=a)
summary(fit3)
a$cons_year = as.character(a$cons_year)
a$cons_year = as.numeric(a$cons_year)
# a2 = a[(a$price < 750000) & (a$type_property=="appartement") ,]
a2 = a
a2$type_property =as.factor(a2$type_property)
fit3 = lm(price~rooms_count + surface_housing + surface_terrain + parkings_count + cons_year + station_distance + type_property , data=a2)
summary(fit3)
a$cons_year = as.character(a$cons_year)
a$cons_year = as.numeric(a$cons_year)
# a2 = a[(a$price < 750000) & (a$type_property=="appartement") ,]
a2 = a
a2$type_property =as.factor(a2$type_property)
a2$district = as.factor(a2$district)
fit3 = lm(price~rooms_count + surface_housing + surface_terrain + parkings_count + cons_year + station_distance + type_property + district , data=a2)
summary(fit3)
a$cons_year = as.character(a$cons_year)
a$cons_year = as.numeric(a$cons_year)
a2 = a[(a$price < 750000),]
a2$type_property =as.factor(a2$type_property)
a2$district = as.factor(a2$district)
fit3 = lm(price~rooms_count + surface_housing + surface_terrain + parkings_count + cons_year + station_distance + type_property + district , data=a2)
summary(fit3)
a$cons_year = as.character(a$cons_year)
a$cons_year = as.numeric(a$cons_year)
a2 = a[(a$price < 750000),]
a2$type_property =as.factor(a2$type_property)
a2$district = as.factor(a2$district)
a2$parkings_count = as.factor(a2$parkings_count)
a2$rooms_count = as.factor(a2$rooms_count)
fit3 = lm(price~rooms_count + surface_housing + surface_terrain + parkings_count + cons_year + station_distance + type_property + district , data=a2)
summary(fit3)
a$cons_year = as.character(a$cons_year)
names(xcv) = districts
xcv
A1 = which.min(xcv)
A2 = which.max(xcv)
print(paste("minimum increase rate is:" ,xcv[A1], " and is for district:" , names(which.min(xcv)) ))
print(paste("maximum increase rate is:" ,xcv[A2], " and is for district:" , names(which.max(xcv)) ))
d1er = a[a$district=="Lyon 1er Arrondissement", ]
d1er2016 = d1er[d1er$year=="2016" ,]
d1er2021 = d1er[d1er$year=="2021", ]
z.test(d1er2021$price, y = 1.5*d1er2016$price , alternative = 'two.sided', mu = 0, sigma.x = sd(d1er2021$price), sigma.y = sd(1.5*d1er2016$price),conf.level = 0.95)
r1 = a[a$type_property == "appartement" , ]
r2 = a[a$type_property == "maison" , ]
mean(r1$price)
mean(r2$price)
mean(r2$price) / mean(r1$price)
z.test(r2$price, y = 2.4*r1$price , alternative = 'two.sided', mu = 0, sigma.x = sd(r2$price), sigma.y = sd(2.4*r1$price),conf.level = 0.95)
hist(a$station_distance , breaks = seq(0 , 4 , 0.05),col = "red" , main="Distribution of station_distance" , xlab = "station_distance")
z.test(r2$price, y = 1*r1$price , alternative = 'two.sided', mu = 0, sigma.x = sd(r2$price), sigma.y = sd(1*r1$price),conf.level = 0.95)
setwd("~/amar/proj2")
